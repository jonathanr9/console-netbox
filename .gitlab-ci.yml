# Configuration GitLab CI/CD pour le projet Ridmi

stages:
  - verification
  - tests
  - construction
  - deploiement

variables:
  CACHE_COMPRESSION_LEVEL: "fastest"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - vendor/

verification-php:
  image: php:8.1-cli
  stage: verification
  script:
    - php -l api.php
  only:
    changes:
      - "*.php"

verification-js:
  image: node:18
  stage: verification
  before_script:
    - npm install eslint
  script:
    - npx eslint create-vm/*.js
  only:
    changes:
      - "create-vm/*.js"
      - "*.html"

tests-js:
  image: node:18
  stage: tests
  before_script:
    - npm install jest @babel/core @babel/preset-env
  script:
    - npx jest create-vm/*.test.js
  only:
    changes:
      - "create-vm/*.js"
      - "create-vm/*.test.js"

tests-connexion-api:
  image: php:8.1-cli
  stage: tests
  script:
    - apt-get update && apt-get install -y curl
    - php -r "
      \$netboxUrl = getenv('RIDMI_URL');
      \$apiToken = getenv('RIDMI_TOKEN');
      
      \$ch = curl_init(\"\$netboxUrl/api/\");
      curl_setopt(\$ch, CURLOPT_HTTPHEADER, [
        \"Authorization: Token \$apiToken\",
        \"Accept: application/json\"
      ]);
      curl_setopt(\$ch, CURLOPT_RETURNTRANSFER, true);
      \$response = curl_exec(\$ch);
      \$httpCode = curl_getinfo(\$ch, CURLINFO_HTTP_CODE);
      
      if (\$httpCode >= 200 && \$httpCode < 300) {
        echo \"Connexion à l'API Ridmi réussie\n\";
        exit(0);
      } else {
        echo \"Échec de connexion à l'API Ridmi : Code HTTP \$httpCode\n\";
        exit(1);
      }
    "
  only:
    - main
    - develop

construction-assets:
  image: node:18
  stage: construction
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - develop

deploiement-staging:
  image: alpine
  stage: deploiement
  script:
    - echo "Déploiement sur le serveur de staging"
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$STAGING_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $STAGING_SERVER_IP >> ~/.ssh/known_hosts
    - rsync -avz --delete dist/ $STAGING_USER@$STAGING_SERVER_IP:/var/www/ridmi-staging/
  environment:
    name: staging
    url: https://staging.ridmi.exemple.com
  only:
    - develop

deploiement-production:
  image: alpine
  stage: deploiement
  script:
    - echo "Déploiement sur le serveur de production"
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$PRODUCTION_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PRODUCTION_SERVER_IP >> ~/.ssh/known_hosts
    - rsync -avz --delete dist/ $PRODUCTION_USER@$PRODUCTION_SERVER_IP:/var/www/ridmi/
  environment:
    name: production
    url: https://ridmi.exemple.com
  only:
    - main
  when: manual

notifications:
  email:
    on_success: change
    on_failure: always